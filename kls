#!/usr/bin/env python3
from typing import Optional, Callable
import subprocess
import curses
import curses.ascii
import asyncio


SCREEN: curses.window = curses.initscr()


# ****************************** #
# START OF CONFIGURATION SECTION #
# ****************************** #
KEY_BINDINGS: dict[str, dict[str, str]] = {  # can be extended
    "^Y": {  # Ctrl + y
        "description": "Yaml",
        "command": 'kubectl -n {namespace} get {api_resource} {resource} -o yaml | batcat -l yaml'
    },
    "^D": {  # Ctrl + d
        "description": "Describe",
        "command": 'kubectl -n {namespace} describe {api_resource} {resource} | batcat -l yaml'
    },
    "^E": {  # Ctrl + e
        "description": "Edit",
        "command": 'kubectl -n {namespace} edit {api_resource} {resource}'
    },
    "^L": {  # Ctrl + l
        "description": "Logs",
        "command": 'kubectl -n {namespace} logs {resource} | lnav'
    },
    "^X": {  # Ctrl + x
        "description": "eXec",
        "command": 'kubectl -n {namespace} exec -it {resource} sh'
    },
    "^N": {  # Ctrl + n
        "description": "Network debug",
        "command": 'kubectl -n {namespace} debug {resource} -it --image=nicolaka/netshoot'
    },
    "^A": {  # Ctrl + a  (a means Access logs! :-))
        "description": "istio-proxy Access logs",
        "command": 'kubectl -n {namespace} logs {resource} -c istio-proxy | lnav'
    },
    "^P": {  # Ctrl + p  (p means Proxy! :-))
        "description": "exec istio-Proxy",
        "command": 'kubectl -n {namespace} exec -it {resource} -c istio-proxy bash'
    },
    "^R": {  # Ctrl + r  (r means Reveal! :-))
        "description": "Reveal secret",
        "command": "kubectl get secret {resource} -n {namespace} -o yaml | yq '.data |= with_entries(.value |= @base64d)' -y | batcat -l yaml"
    },
    "Delete": {  # It is actually KEY_DC
        "description": "Delete",
        "command": 'kubectl -n {namespace} delete {api_resource} {resource}'
    }
}

# which api resources are on the top of menu?
TOP_API_RESOURCES: list[str] = [
    "pods", "services", "configmaps", "secrets", "persistentvolumeclaims",
    "ingresses", "nodes", "deployments", "statefulsets", "daemonsets",
    "storageclasses", "serviceentries", "destinationrules",
    "virtualservices", "gateways", "telemetry", "envoyfilters"
]

QUERY_API_RESOURCES: bool = False  # Should we merge TOP_API_RESOURCES with all other api resources from cluster?
BATCAT_STYLE: str = " --paging always --style numbers"  # style of batcat
MOUSE_ENABLED: bool = False
WIDTH: int = curses.COLS
WIDTH_UNIT: int = int(WIDTH / 8)
NAMESPACES_WIDTH = int(WIDTH_UNIT * 1.5)
API_RESOURCES_WIDTH = int(WIDTH_UNIT * 1.5)
RESOURCES_WIDTH = WIDTH - (API_RESOURCES_WIDTH + NAMESPACES_WIDTH)
HEADER_HEIGHT: int = 4
FOOTER_HEIGHT: int = 3
ROWS_HEIGHT: int = curses.LINES - HEADER_HEIGHT - FOOTER_HEIGHT - 3
# Generate HELP_TEXT from KEY_BINDINGS
HELP_TEXT: str = ", ".join(f"{key}: {binding['description']}" for key, binding in KEY_BINDINGS.items())
HELP_TEXT += ", /: filter mode, Esc: exit filter mode or kls, arrows/TAB/PgUp/PgDn: navigation"

# **************************** #
# END OF CONFIGURATION SECTION #
# **************************** #


class CircularList:
    def __init__(self, elements: list[str]):
        self.elements: list[str] = elements
        self.size: int = len(elements)
        self.index: int = 0

    def __getitem__(self, index: slice) -> list[str]:
        start, stop, step = index.indices(self.size)
        return [self.elements[(self.index + i) % self.size] for i in range(start, stop, step)]

    def shift(self, steps: int) -> None:
        self.index = (self.index + steps) % self.size


class Menu:
    def __init__(self, title: str, rows: list[str], begin_x: int|float, width: int|float, rows_height: int):
        self.title: str = title
        self.rows: list[str] = rows
        self.filter: str = ""
        self.filter_mode: bool = False
        self.filtered_rows: CircularList = CircularList([x for x in self.rows if self.filter in x])
        self.visible_rows: Callable[[], list[str]] = lambda: self.filtered_rows[:rows_height]
        self.visible_row_index: int = 0
        self.selected_row: Callable[[], Optional[str]] = lambda: self.visible_rows()[
            self.visible_row_index] if self.visible_rows() else None
        self.rows_height: int = rows_height
        self.width: int = int(width)
        self.begin_x: int = int(begin_x)
        self.win: curses.window = curses.newwin(curses.LINES - FOOTER_HEIGHT, self.width, 0, self.begin_x)


# Global variables
THIRD_MENU_LOCK: asyncio.Lock = asyncio.Lock()
THIRD_MENU_TASK: Optional[asyncio.Task] = None
menus: list[Menu] = []
selected_menu: Optional[Menu] = None


def draw_row(window: curses.window, text: str, y: int, x: int, selected: bool = False) -> None:
    window.addstr(y, x, text, curses.A_REVERSE | curses.A_BOLD if selected else curses.A_NORMAL)
    window.clrtoeol()
    window.refresh()


def draw_rows(menu: Menu) -> None:
    for index, row in enumerate(menu.visible_rows()):
        draw_row(menu.win, row, index + HEADER_HEIGHT, 2, selected = row == menu.selected_row())


def draw_menu(menu: Menu) -> None:
    menu.win.erase()
    draw_row(menu.win, menu.title, 1, 2, selected = menu == selected_menu)
    draw_rows(menu)
    draw_row(menu.win, f"/{menu.filter}" if menu.filter_mode else "", curses.LINES - FOOTER_HEIGHT - 2, 2)


async def refresh_third_menu(namespace: Optional[str], api_resource: Optional[str]) -> None:
    global THIRD_MENU_TASK
    try:
        async with THIRD_MENU_LOCK:
            menu = menus[2]
            previous_menu_rows = menu.rows
            if api_resource and namespace:
                try:
                    menu.rows = await kubectl_async(
                        f"-n {namespace} get {api_resource} --no-headers --ignore-not-found")
                except subprocess.CalledProcessError:
                    menu.rows = []
            else:
                menu.rows = []
            index_before_update = menu.filtered_rows.index
            menu.filtered_rows = CircularList([x for x in menu.rows if menu.filter in x])
            menu.filtered_rows.index = index_before_update
            if menu.visible_row_index >= len(menu.visible_rows()):
                menu.visible_row_index = 0
            if previous_menu_rows != menu.rows:
                draw_menu(menu)
    except asyncio.CancelledError:
        raise


async def handle_key_bindings(key: str, namespace: str, api_resource: str, resource: str) -> None:
    if not resource:
        return
    if key in ("l", "x", "n") and api_resource != "pods":
        return
    if key == "KEY_DC":
        key = "Delete"
    if THIRD_MENU_TASK is not None:
        THIRD_MENU_TASK.cancel()
        try:
            await THIRD_MENU_TASK
        except asyncio.CancelledError:
            pass
    async with THIRD_MENU_LOCK:
        curses.def_prog_mode()
        curses.endwin()
        command = KEY_BINDINGS[key]["command"].format(namespace=namespace, api_resource=api_resource, resource=resource)
        if "batcat" in command:
            command += BATCAT_STYLE
        await subprocess_call_async(command)
        curses.reset_prog_mode()
        SCREEN.refresh()
        enable_mouse_support()


def handle_filter_state(key: str, menu: Menu) -> None:
    global selected_menu
    if key == "/" and not menu.filter_mode:
        menu.filter_mode = True
        menu.filter = ""
    elif key == "\x1b":  # Escape key
        if menu.filter_mode:
            menu.filter_mode = False
            menu.filter = ""
        else:
            selected_menu = None
    elif menu.filter_mode:
        if key in ["KEY_BACKSPACE", "\x08"] and menu.filter:
            menu.filter = menu.filter[:-1]  # Remove last character
        elif key.isalnum() or key == "-":  # Allow letters, numbers, and dashes
            menu.filter += key.lower()
    menu.visible_row_index = 0
    menu.filtered_rows = CircularList([x for x in menu.rows if menu.filter in x])
    draw_menu(menu)
    if menu != menus[2]:
        menus[2].visible_row_index = 0


def handle_mouse(menu: Menu) -> None:
    if not MOUSE_ENABLED:
        return
    try:
        mouse_info: tuple[int, ...] = curses.getmouse()
    except curses.error:  # this fixes scrolling error
        return
    row_number = mouse_info[2] - HEADER_HEIGHT
    column_number = mouse_info[1]
    next_menu: Optional[Menu] = None
    if column_number > (menu.begin_x + menu.width):
        next_menu = menus[(menus.index(menu) + 1) % 3]
        if column_number > (next_menu.begin_x + next_menu.width):
            next_menu = menus[(menus.index(next_menu) + 1) % 3]
        globals().update(selected_menu=next_menu)
    elif column_number < menu.begin_x:
        next_menu = menus[(menus.index(menu) - 1) % 3]
        if column_number < next_menu.begin_x:
            next_menu = menus[(menus.index(next_menu) - 1) % 3]
        globals().update(selected_menu=next_menu)
    if next_menu:
        draw_row(menu.win, menu.title, 1, 2, selected=False)
        draw_row(next_menu.win, next_menu.title, 1, 2, selected=True)
        menu = next_menu
    char_int = menu.win.inch(mouse_info[2], column_number - menu.begin_x - 1)
    char_str = chr(char_int & 0xFF)
    if not char_str or ord(char_str) > 127 or ' ' in char_str:
        return
    if 0 <= row_number < len(menu.visible_rows()):
        menu.visible_row_index = row_number
        draw_rows(menu)
        if menu != menus[2]:
            menus[2].visible_row_index = 0


def handle_vertical_navigation(key: str, menu: Menu) -> None:
    if len(menu.visible_rows()) <= 1:
        return
    keys_numbers: dict[str, int] = {
        "KEY_DOWN": 1, "KEY_UP": -1,
        "KEY_NPAGE": 1, "KEY_PPAGE": -1,
        'KEY_HOME': 0, 'KEY_END': -1
    }
    if key in ["KEY_DOWN", "KEY_UP"]:
        if menu.filtered_rows.size > menu.rows_height:
            menu.filtered_rows.shift(keys_numbers[key])
        else:
            menu.visible_row_index = (menu.visible_row_index + keys_numbers[key]) % menu.filtered_rows.size
    elif key in ["KEY_NPAGE", "KEY_PPAGE"]:
        menu.filtered_rows.shift(keys_numbers[key] * len(menu.visible_rows()))
    elif key in ['KEY_HOME', 'KEY_END']:
        menu.visible_row_index = keys_numbers[key]
    draw_rows(menu)
    if menu != menus[2]:
        menus[2].visible_row_index = 0


def handle_horizontal_navigation(key: str, menu: Menu) -> None:
    increment: int = {"KEY_RIGHT": 1, "\t": 1, "KEY_LEFT": -1, "KEY_BTAB": -1}[key]
    next_menu = menus[(menus.index(menu) + increment) % 3]
    draw_row(menu.win, menu.title, 1, 2, selected=False)
    draw_row(next_menu.win, next_menu.title, 1, 2, selected=True)
    globals().update(selected_menu=next_menu)


async def confirm_action(message: str) -> bool:
    rows, cols = SCREEN.getmaxyx()
    popup_height = 5
    popup_width = len(message) + 10
    start_y = (rows - popup_height) // 2
    start_x = (cols - popup_width) // 2

    popup = curses.newwin(popup_height, popup_width, start_y, start_x)
    popup.box()
    popup.addstr(2, 2, message)
    popup.addstr(3, 2, "Press 'y' to confirm, 'n' to cancel")

    popup.refresh()
    while True:
        key = await get_key_async(popup)
        if key.lower() == 'y':
            return True
        if key.lower() == 'n':
            popup.clear()
            popup.refresh()
            return False


async def get_key_async(popup: curses.window) -> str:
    return await asyncio.to_thread(popup.getkey)


async def kubectl_async(command: str) -> list[str]:
    process = await asyncio.create_subprocess_shell(
        f"kubectl {command} 2> /dev/null",
        stdout=asyncio.subprocess.PIPE,
        stderr=asyncio.subprocess.PIPE
    )
    stdout, stderr = await process.communicate()
    if stderr:
        raise subprocess.CalledProcessError(process.returncode, command, stderr=stderr)
    return stdout.decode().strip().split("\n")


async def catch_input(menu: Menu) -> None:
    global THIRD_MENU_TASK
    while True:
        try:
            key = await get_key_async(SCREEN)
            break
        except curses.error:
            if THIRD_MENU_TASK is None or THIRD_MENU_TASK.done() or THIRD_MENU_TASK.cancelled():
                THIRD_MENU_TASK = asyncio.create_task(
                    refresh_third_menu(
                        menus[0].selected_row(),
                        menus[1].selected_row()
                    )
                )
            await asyncio.sleep(0.1)

    if key in ["\t", "KEY_RIGHT", "KEY_BTAB", "KEY_LEFT"]:
        handle_horizontal_navigation(key, menu)
    elif key in ["KEY_UP", "KEY_DOWN", "KEY_NPAGE", "KEY_PPAGE", "KEY_HOME", "KEY_END"]:
        if THIRD_MENU_TASK is not None:
            THIRD_MENU_TASK.cancel()
            try:
                await THIRD_MENU_TASK
            except asyncio.CancelledError:
                pass
        handle_vertical_navigation(key, menu)
    elif key == "KEY_MOUSE":
        handle_mouse(menu)
    elif key == "KEY_DC" and await confirm_action("Are you sure you want to delete this resource?"):
        await handle_key_bindings(
            key,
            menus[0].selected_row(),
            menus[1].selected_row(),
            menus[2].selected_row() and menus[2].selected_row().split()[0]
        )
    elif key in ["/", "\x1b", "KEY_BACKSPACE", "\x08"] or key.isalnum() or key == "-":
        handle_filter_state(key, menu)
    elif key != "KEY_DC" and curses.ascii.unctrl(key) in KEY_BINDINGS:
        await handle_key_bindings(
            curses.ascii.unctrl(key),
            menus[0].selected_row(),
            menus[1].selected_row(),
            menus[2].selected_row() and menus[2].selected_row().split()[0]
        )


async def subprocess_call_async(command: str) -> None:
    process = await asyncio.create_subprocess_shell(command)
    await process.communicate()


def enable_mouse_support() -> None:
    if MOUSE_ENABLED:
        curses.mousemask(curses.REPORT_MOUSE_POSITION)
        print('\033[?1003h')


async def init_menus() -> None:
    global menus, selected_menu
    api_resources_kubectl: list[str] = [
        x.split()[0] for x in await kubectl_async("api-resources --no-headers --verbs=get")
    ]
    api_resources = list(
        dict.fromkeys(TOP_API_RESOURCES + api_resources_kubectl)
    ) if QUERY_API_RESOURCES else TOP_API_RESOURCES

    namespaces: list[str] = []
    try:
        namespaces = await kubectl_async("config view --minify --output 'jsonpath={..namespace}'")
    except:
        pass

    try:
        all_namespaces = await kubectl_async("get ns --no-headers -o custom-columns=NAME:.metadata.name")
        if all_namespaces:
            if namespaces:
                all_namespaces.remove(namespaces[0])
                namespaces = namespaces + all_namespaces
            else:
                namespaces = all_namespaces
    except:
        pass

    menus = [
        Menu("Namespaces", namespaces, 0, NAMESPACES_WIDTH, ROWS_HEIGHT),
        Menu("API resources", api_resources, NAMESPACES_WIDTH, API_RESOURCES_WIDTH, ROWS_HEIGHT),
        Menu("Resources", [], NAMESPACES_WIDTH + API_RESOURCES_WIDTH, RESOURCES_WIDTH, ROWS_HEIGHT)
    ]
    selected_menu = menus[0]

    SCREEN.refresh()
    SCREEN.nodelay(True)
    SCREEN.keypad(True)
    curses.set_escdelay(1)
    curses.curs_set(0)
    curses.use_default_colors()
    curses.noecho()
    enable_mouse_support()


async def main_async() -> None:
    await init_menus()
    for menu in menus:
        draw_menu(menu)
    draw_row(
        curses.newwin(3, curses.COLS, curses.LINES - FOOTER_HEIGHT, 0),
        HELP_TEXT, 1, 2
    )
    while selected_menu:
        await catch_input(selected_menu)


def main(screen: curses.window) -> None:
    asyncio.run(main_async())


if __name__ == "__main__":
    curses.wrapper(main)
    subprocess.run("tput reset", shell=True)
